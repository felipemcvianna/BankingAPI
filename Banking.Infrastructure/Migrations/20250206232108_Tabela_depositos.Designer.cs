// <auto-generated />
using System;
using Banking.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Banking.Infrastructure.Migrations
{
    [DbContext(typeof(BankingDbContext))]
    [Migration("20250206232108_Tabela_depositos")]
    partial class Tabela_depositos
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Banking.Domain.Entities.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumeroConta")
                        .HasColumnType("integer");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserIdentifier")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Banking.Domain.Entities.Conta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NumeroAgencia")
                        .HasColumnType("integer");

                    b.Property<int>("NumeroBanco")
                        .HasColumnType("integer");

                    b.Property<int>("NumeroConta")
                        .HasColumnType("integer");

                    b.Property<double>("Saldo")
                        .HasColumnType("double precision");

                    b.Property<Guid>("UserIdentifier")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Contas");
                });

            modelBuilder.Entity("Banking.Domain.Entities.Deposito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CPFCliente")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("ValorDeposito")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Depositos");
                });

            modelBuilder.Entity("Banking.Domain.Entities.Transacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CPFClienteDestino")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CPFCliteOrigem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataTransacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("nomeClienteDestino")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("nomeClienteOrigem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("numeroTransacao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("valorTransacao")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Transacoes");
                });

            modelBuilder.Entity("Banking.Domain.Entities.Deposito", b =>
                {
                    b.OwnsOne("Banking.Domain.Entities.AuxiliarTransacao", "ContaDeposito", b1 =>
                        {
                            b1.Property<int>("DepositoId")
                                .HasColumnType("integer");

                            b1.Property<int>("numeroAgencia")
                                .HasColumnType("integer");

                            b1.Property<int>("numeroBanco")
                                .HasColumnType("integer");

                            b1.Property<int>("numeroConta")
                                .HasColumnType("integer");

                            b1.HasKey("DepositoId");

                            b1.ToTable("Depositos");

                            b1.WithOwner()
                                .HasForeignKey("DepositoId");
                        });

                    b.Navigation("ContaDeposito")
                        .IsRequired();
                });

            modelBuilder.Entity("Banking.Domain.Entities.Transacao", b =>
                {
                    b.OwnsOne("Banking.Domain.Entities.AuxiliarTransacao", "contaDestino", b1 =>
                        {
                            b1.Property<int>("TransacaoId")
                                .HasColumnType("integer");

                            b1.Property<int>("numeroAgencia")
                                .HasColumnType("integer");

                            b1.Property<int>("numeroBanco")
                                .HasColumnType("integer");

                            b1.Property<int>("numeroConta")
                                .HasColumnType("integer");

                            b1.HasKey("TransacaoId");

                            b1.ToTable("Transacoes");

                            b1.WithOwner()
                                .HasForeignKey("TransacaoId");
                        });

                    b.OwnsOne("Banking.Domain.Entities.AuxiliarTransacao", "contaOrigem", b1 =>
                        {
                            b1.Property<int>("TransacaoId")
                                .HasColumnType("integer");

                            b1.Property<int>("numeroAgencia")
                                .HasColumnType("integer");

                            b1.Property<int>("numeroBanco")
                                .HasColumnType("integer");

                            b1.Property<int>("numeroConta")
                                .HasColumnType("integer");

                            b1.HasKey("TransacaoId");

                            b1.ToTable("Transacoes");

                            b1.WithOwner()
                                .HasForeignKey("TransacaoId");
                        });

                    b.Navigation("contaDestino")
                        .IsRequired();

                    b.Navigation("contaOrigem")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
